# 指定 docker-compose 编译版本
version: '3.8'

services:
  # 添加监控可视化面板
  grafana:
    # chown 472:472 ./grafana/data -R 不然grafana service无法启动，宿主机权限问题,也可以尝试 user: '0'
    image: grafana/grafana:latest
    user: '472'
    container_name: grafana
    hostname: grafana
    restart: always
    ports:
      - 3000:3000
    # 时间
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=Admin#123
    volumes:
      # 配置grafana 邮件服务器
      - ./grafana/config/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/data:/var/lib/grafana
      - ./grafana/log:/var/log/grafana
    networks:
      - apuer.amon
  
  # 添加portainer
  portainer:
    image: portainer/portainer-ce:alpine
    container_name: portainer
    hostname: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./portainer/data:/data
    ports:
      - 9000:9000
    networks:
      - apuer.amon

  # 添加amon接收MDs的amon数据
  amon:  
    image: openjdk:17-jdk-alpine
    container_name: amon
    hostname: amon
    restart: always
    ports:
      - 5555:5555
      - 8211:8211/udp
      - 8209:8209/udp
    volumes:
      # 配置数据目录
      - ./amon:/opt/amon
    working_dir: /opt/amon
    # entrypoint: 'nohup java -jar amon-1.8.2-release.jar --amon-recorder --amon-store zmq  --amon-mappers ./config/amon-mappers.md  >amon.log 2>1& &'
    # entrypoint: ["sh", "-c", "java -jar amon-1.8.2-release.jar --amon-recorder --amon-store zmq  --amon-mappers ./config/amon-mappers.md", ">amon.log", "2>1&", "&"]
    entrypoint: sh ./config/amon.sh

    networks:
      - apuer.amon

  # 添加telegraf service,telegraf 目前版本不支持ZeroMQ，暂时注释掉
  # telegraf:
  #   image: telegraf:alpine
  #   container_name: telegraf.apuer
  #   hostname: telegraf.apuer
  #   volumes:
  #     - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
  #   depends_on:
  #     - influxdb
  #   ports:
  #     - '8125:8125/udp'
  #   restart: always
  #   networks:
  #     - apuer.amon

  # 添加amon2influxdb 服务，python版本的3.10.5,运行python脚本，订阅amon service的ZeroMQ消息，并将消息写入influxdb service的influxdb数据库中
  amon2influxdb:
    build:
      context: ./amon2influxdb
      dockerfile: Dockerfile  
    image: python4amon2influxdb:3.10.5
    container_name: amon2influxdb
    hostname: amon2influxdb
    restart: always
    # ports:
    #   - 5555:5555
    volumes:
      # 配置数据目录
      - ./amon2influxdb:/opt/amon2influxdb/
    working_dir: /opt/amon2influxdb
    # entrypoint: 'nohup java -jar amon-1.8.2-release.jar --amon-recorder --amon-store zmq  --amon-mappers ./config/amon-mappers.md  >amon.log 2>1& &'
    # entrypoint: ["sh", "-c", "java -jar amon-1.8.2-release.jar --amon-recorder --amon-store zmq  --amon-mappers ./config/amon-mappers.md", ">amon.log", "2>1&", "&"]
    entrypoint: sh ./config/amon2influxdb.sh

    networks:
      - apuer.amon 

  # 添加influxdb service
  influxdb:
    image: influxdb:alpine
    container_name: influxdb
    hostname: influxdb
    ports:
      - "8083:8083"
      - "8086:8086"
    env_file: 
      - config.env
    # environment: 
      # Use these same configurations parameters in your telegraf configuration, telegraf.conf.
      # - DOCKER_INFLUXDB_INIT_MODE
      # - DOCKER_INFLUXDB_INIT_USERNAME
      # - DOCKER_INFLUXDB_INIT_PASSWORD
      # - DOCKER_INFLUXDB_INIT_ORG
      # - DOCKER_INFLUXDB_INIT_BUCKET
      # - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
    volumes:
      # 数据目录挂载
      - ./influxdb/data:/var/lib/influxdb2
      # 配置文件挂载
      - ./influxdb/config:/etc/influxdb2
    restart: always
    networks:
      - apuer.amon

  # chronograf:
  #   image: chronograf:alpine
  #   container_name: chronograf
  #   hostname: chronograf
  #   volumes:
  #     # Mount for chronograf database
  #     - ./chronograf/data/:/var/lib/chronograf/
  #   ports:
  #     # The WebUI for Chronograf is served on port 8888
  #     - "8888:8888"
  #   depends_on:
  #     - influxdb
  #   restart: always
  #   networks:
  #     - apuer.amon

networks:
    apuer.amon:
        driver: bridge
